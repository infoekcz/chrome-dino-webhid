import*as PacketParser from"./parse.js";const concatTypedArrays=(a,b)=>{const c=new a.constructor(a.length+b.length);c.set(a,0);c.set(b,a.length);return c};class JoyCon extends EventTarget{constructor(device){super();this.device=device}async open(){if(!this.device.opened){await this.device.open()}this.device.addEventListener("inputreport",this._onInputReport.bind(this))}async requestDeviceInfo(){const outputReportID=1;const subcommand=[2];const data=[0,0,0,0,0,0,0,0,0,...subcommand];await this.device.sendReport(outputReportID,new Uint8Array(data));return new Promise((resolve=>{const onDeviceInfo=({detail:deviceInfo})=>{this.removeEventListener("deviceinfo",onDeviceInfo);delete deviceInfo._raw;delete deviceInfo._hex;resolve(deviceInfo)};this.addEventListener("deviceinfo",onDeviceInfo)}))}async requestBatteryLevel(){const outputReportID=1;const subCommand=[80];const data=[0,0,0,0,0,0,0,0,0,...subCommand];await this.device.sendReport(outputReportID,new Uint8Array(data));return new Promise((resolve=>{const onBatteryLevel=({detail:batteryLevel})=>{this.removeEventListener("batterylevel",onBatteryLevel);delete batteryLevel._raw;delete batteryLevel._hex;resolve(batteryLevel)};this.addEventListener("batterylevel",onBatteryLevel)}))}async enableSimpleHIDMode(){const outputReportID=1;const subcommand=[3,63];const data=[0,0,0,0,0,0,0,0,0,...subcommand];await this.device.sendReport(outputReportID,new Uint8Array(data))}async enableStandardFullMode(){const outputReportID=1;const subcommand=[3,48];const data=[0,0,0,0,0,0,0,0,0,...subcommand];await this.device.sendReport(outputReportID,new Uint8Array(data))}async enableIMUMode(){const outputReportID=1;const subcommand=[64,1];const data=[0,0,0,0,0,0,0,0,0,...subcommand];await this.device.sendReport(outputReportID,new Uint8Array(data))}async disableIMUMode(){const outputReportID=1;const subcommand=[64,0];const data=[0,0,0,0,0,0,0,0,0,...subcommand];await this.device.sendReport(outputReportID,new Uint8Array(data))}_onInputReport(event){let{data,reportId,device}=event;if(!data){return}data=concatTypedArrays(new Uint8Array([reportId]),new Uint8Array(data.buffer));const hexData=data.map((byte=>byte.toString(16)));let packet={inputReportID:PacketParser.parseInputReportID(data,hexData)};switch(reportId){case 63:{packet={...packet,buttonStatus:PacketParser.parseButtonStatus(data,hexData),analogStick:PacketParser.parseAnalogStick(data,hexData),filter:PacketParser.parseFilter(data,hexData)};break}case 33:case 48:{packet={...packet,timer:PacketParser.parseTimer(data,hexData),batteryLevel:PacketParser.parseBatteryLevel(data,hexData),connectionInfo:PacketParser.parseConnectionInfo(data,hexData),buttonStatus:PacketParser.parseCompleteButtonStatus(data,hexData),analogStickLeft:PacketParser.parseAnalogStickLeft(data,hexData),analogStickRight:PacketParser.parseAnalogStickRight(data,hexData),vibrator:PacketParser.parseVibrator(data,hexData)};if(reportId===33){packet={...packet,ack:PacketParser.parseAck(data,hexData),subcommandID:PacketParser.parseSubcommandID(data,hexData),subcommandReplyData:PacketParser.parseSubcommandReplyData(data,hexData),deviceInfo:PacketParser.parseDeviceInfo(data,hexData)}}if(reportId===48){const accelerometers=PacketParser.parseAccelerometers(data,hexData);const gyroscopes=PacketParser.parseGyroscopes(data,hexData);const rps=PacketParser.calculateActualGyroscope(gyroscopes.map((g=>g.map((v=>v.rps)))));const acc=PacketParser.calculateActualAccelerometer(accelerometers.map((a=>[a.x.acc,a.y.acc,a.z.acc])));packet={...packet,accelerometers,gyroscopes,actualAccelerometer:acc,actualGyroscope:{dps:PacketParser.calculateActualGyroscope(gyroscopes.map((g=>g.map((v=>v.dps))))),rps},actualOrientation:PacketParser.toEulerAngles(rps,acc,device.productId)}}break}}if(packet.deviceInfo?.type){this._receiveDeviceInfo(packet.deviceInfo)}if(packet.batteryLevel?.level){this._receiveBatteryLevel(packet.batteryLevel)}this._receiveInputEvent(packet)}_receiveDeviceInfo(deviceInfo){this.dispatchEvent(new CustomEvent("deviceinfo",{detail:deviceInfo}))}_receiveBatteryLevel(batteryLevel){this.dispatchEvent(new CustomEvent("batterylevel",{detail:batteryLevel}))}}class JoyConLeft extends JoyCon{constructor(device){super(device)}_receiveInputEvent(packet){delete packet.buttonStatus.x;delete packet.buttonStatus.y;delete packet.buttonStatus.b;delete packet.buttonStatus.a;delete packet.buttonStatus.plus;delete packet.buttonStatus.r;delete packet.buttonStatus.zr;delete packet.buttonStatus.home;delete packet.buttonStatus.rightStick;this.dispatchEvent(new CustomEvent("hidinput",{detail:packet}))}}class JoyConRight extends JoyCon{constructor(device){super(device)}_receiveInputEvent(packet){delete packet.buttonStatus.up;delete packet.buttonStatus.down;delete packet.buttonStatus.left;delete packet.buttonStatus.right;delete packet.buttonStatus.minus;delete packet.buttonStatus.l;delete packet.buttonStatus.zl;delete packet.buttonStatus.capture;delete packet.buttonStatus.leftStick;this.dispatchEvent(new CustomEvent("hidinput",{detail:packet}))}}export{JoyConLeft,JoyConRight};